pipeline {
    agent any
    
    tools {
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        SLACK_CHANNEL = 'jenkins_builds' // Change this to your desired Slack channel
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/harshaldhake3/Ekart.git'
            }
        }
        
        stage('Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        
        stage('Test') {
            steps {
                sh 'mvn test -DskipTests=true'
            }
        }
        
        stage('Trivy FileSys Scan') {
            steps {
                sh 'trivy fs --format table -o fs-report.html .'
            }
        }
        
        stage('SQ Scanner Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh '''
                    $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectKey=Ekart \
                    -Dsonar.projectName=Ekart \
                    -Dsonar.java.binaries=target
                    '''
                }
            }
        }
        
        stage('SQ Quality Gates') {
            steps {
                waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube'
            }
        }
        
        stage('Build Application') {
            steps {
                sh 'mvn package -DskipTests=true'
            }
        }
        
        stage('Publish to Nexus Repo') {
            steps {
                withMaven(globalMavenSettingsConfig: 'settings', maven: 'maven3', traceability: true) {
                    sh 'mvn deploy -DskipTests=true'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'dockerhub', toolName: 'docker') {
                        sh 'docker build -t harshaladmin/ekart:latest -f docker/Dockerfile .'
                    }
                }
            }
        }
        
        stage('Docker Image Trivy Scan') {
            steps {
                sh 'trivy image --skip-db-update --format table -o image.html harshaladmin/ekart:latest'
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'dockerhub', toolName: 'docker') {
                        sh 'docker push harshaladmin/ekart:latest'
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                withKubeConfig(
                    caCertificate: '', 
                    clusterName: 'kubernetes', 
                    contextName: '', 
                    credentialsId: 'kubernetes-cp', 
                    namespace: 'webapps', 
                    restrictKubeConfigAccess: false, 
                    serverUrl: 'https://192.168.1.11:6443'
                ) {
                    sh 'kubectl apply -f deploymentservice.yml --validate=false'
                }
            }
        }

        stage('Verify Deploy to Kubernetes') {
            steps {
                withKubeConfig(
                    caCertificate: '', 
                    clusterName: 'kubernetes', 
                    contextName: '', 
                    credentialsId: 'kubernetes-cp', 
                    namespace: 'webapps', 
                    restrictKubeConfigAccess: false, 
                    serverUrl: 'https://192.168.1.11:6443'
                ) {
                    sh 'kubectl get pods -n webapps'
                    sh 'kubectl get svc -n webapps'
                }
            }
        }
    }

    post {
        always {
            script {
                def duration = currentBuild.durationString.replace(" and counting", "")
                slackSend(
                    channel: "${SLACK_CHANNEL}",
                    color: currentBuild.result == 'SUCCESS' ? 'good' : 'danger',
                    message: """
*Build Notification*
> *Project*: ${env.JOB_NAME}
> *Build Number*: #${env.BUILD_NUMBER}
> *Status*: ${currentBuild.result}
> *Duration*: ${duration}
> *Triggered By*: ${currentBuild.getBuildCauses()[0]?.userName ?: 'Unknown'}
> *Build URL*: <${env.BUILD_URL}|Open Build>
"""
                )
            }
        }
        
        success {
            slackSend(
                channel: "${SLACK_CHANNEL}",
                color: 'good',
                message: """
🎉 *Build Successful!*
> *Project*: ${env.JOB_NAME}
> *Build Number*: #${env.BUILD_NUMBER}
> *Build URL*: <${env.BUILD_URL}|Open Build>
"""
            )
        }
        
        failure {
            slackSend(
                channel: "${SLACK_CHANNEL}",
                color: 'danger',
                message: """
❌ *Build Failed!*
> *Project*: ${env.JOB_NAME}
> *Build Number*: #${env.BUILD_NUMBER}
> *Build URL*: <${env.BUILD_URL}|Open Build>
"""
            )
        }
    }
}
